import { test, expect } from '@playwright/test';

test.describe('Testes B√°sicos de Acessibilidade', () => {
  test('Bot√µes s√£o foc√°veis via teclado', async ({ page }) => {
    await page.setContent(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>Teste de Acessibilidade</title>
        </head>
        <body>
          <button>Primeiro Bot√£o</button>
          <button>Segundo Bot√£o</button>
          <input type="text" placeholder="Campo de entrada">
        </body>
      </html>
    `);
    
    // Testa se bot√µes s√£o foc√°veis
    await page.keyboard.press('Tab');
    await expect(page.getByRole('button', { name: 'Primeiro Bot√£o' })).toBeFocused();
    
    await page.keyboard.press('Tab');
    await expect(page.getByRole('button', { name: 'Segundo Bot√£o' })).toBeFocused();
    
    await page.keyboard.press('Tab');
    await expect(page.getByPlaceholder('Campo de entrada')).toBeFocused();
  });

  test('Links t√™m texto adequado', async ({ page }) => {
    await page.setContent(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>Teste de Links</title>
        </head>
        <body>
          <a href="/home">P√°gina Inicial</a>
          <a href="/marketplace" aria-label="Ir para o marketplace">üõí</a>
          <a href="/about">Sobre N√≥s</a>
        </body>
      </html>
    `);
    
    // Verifica se links t√™m texto ou aria-label
    const homeLink = page.getByRole('link', { name: 'P√°gina Inicial' });
    await expect(homeLink).toBeVisible();
    
    const marketplaceLink = page.getByRole('link', { name: 'Ir para o marketplace' });
    await expect(marketplaceLink).toBeVisible();
    
    const aboutLink = page.getByRole('link', { name: 'Sobre N√≥s' });
    await expect(aboutLink).toBeVisible();
  });

  test('Headings seguem hierarquia', async ({ page }) => {
    await page.setContent(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>Teste de Headings</title>
        </head>
        <body>
          <h1>T√≠tulo Principal</h1>
          <h2>Subt√≠tulo</h2>
          <h3>Sub-subt√≠tulo</h3>
          <p>Conte√∫do regular</p>
        </body>
      </html>
    `);
    
    // Verifica se headings est√£o presentes
    await expect(page.getByRole('heading', { level: 1, name: 'T√≠tulo Principal' })).toBeVisible();
    await expect(page.getByRole('heading', { level: 2, name: 'Subt√≠tulo' })).toBeVisible();
    await expect(page.getByRole('heading', { level: 3, name: 'Sub-subt√≠tulo' })).toBeVisible();
  });

  test('Formul√°rios t√™m labels apropriados', async ({ page }) => {
    await page.setContent(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>Teste de Formul√°rios</title>
        </head>
        <body>
          <form>
            <label for="name">Nome:</label>
            <input type="text" id="name" name="name">
            
            <label for="email">Email:</label>
            <input type="email" id="email" name="email">
            
            <button type="submit">Enviar</button>
          </form>
        </body>
      </html>
    `);
    
    // Verifica se inputs t√™m labels
    await expect(page.getByRole('textbox', { name: 'Nome:' })).toBeVisible();
    await expect(page.getByRole('textbox', { name: 'Email:' })).toBeVisible();
    await expect(page.getByRole('button', { name: 'Enviar' })).toBeVisible();
  });
});
