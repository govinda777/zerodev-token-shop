"use client";

import { usePrivy } from '@privy-io/react-auth';
import { useEffect } from 'react';
import { NETWORK_CONFIG } from '@/contracts/config';
import { notifyInfo, notifySuccess } from '@/utils/notificationService';

export interface UserInfo {
  id: string;
  email?: string;
  wallet?: string;
  createdAt?: number;
}

// Chain ID da rede padr√£o (Sepolia)
const DEFAULT_CHAIN_ID = 11155111;

export function usePrivyAuth() {
  const {
    authenticated,
    user,
    login,
    logout,
    connectWallet,
    linkWallet
  } = usePrivy();

  // Estados derivados - removendo depend√™ncia do ready
  const isReady = true; // Sempre pronto
  const isAuthenticated = authenticated;
  const isConnecting = false; // Simplificado
  const isConnected = authenticated;

  // Dados do usu√°rio
  const address = user?.wallet?.address;
  
  const userInfo: UserInfo | null = user ? {
    id: user.id,
    email: user.email?.address,
    wallet: user.wallet?.address,
    createdAt: user.createdAt ? new Date(user.createdAt).getTime() : Date.now()
  } : null;

  // Verifica√ß√µes
  const hasWallet = !!user?.wallet?.address;

  // Fun√ß√£o para verificar se √© um smart wallet (melhorada)
  const isSmartWallet = !!(
    user?.wallet?.walletClientType === 'privy' ||
    (user?.wallet?.address && !user?.wallet?.connectorType) ||
    (user?.linkedAccounts?.some(acc => ['email', 'google', 'apple', 'sms'].includes(acc.type)) && user?.wallet?.address)
  );

  // Fun√ß√£o para detectar se √© carteira externa
  const isExternalWallet = !!(
    user?.wallet?.connectorType &&
    ['metamask', 'walletConnect', 'coinbaseWallet', 'injected'].includes(user.wallet.connectorType)
  );

  // Fun√ß√£o para mudar automaticamente para a rede padr√£o
  const switchToDefaultNetwork = async () => {
    if (typeof window === 'undefined' || !window.ethereum) {
      console.log('üîß Ethereum provider n√£o dispon√≠vel');
      return;
    }

    try {
      console.log('üîÑ Verificando rede atual...');
      
      const currentChainId = await (window.ethereum as any).request({ 
        method: 'eth_chainId' 
      });
      
      const numericChainId = parseInt(currentChainId, 16);
      console.log('üîó Rede atual:', numericChainId);
      
      if (numericChainId === DEFAULT_CHAIN_ID) {
        console.log('‚úÖ J√° est√° na rede Sepolia');
        notifySuccess('‚úÖ J√° conectado √† rede Sepolia!');
        return;
      }

      console.log('üîÑ Mudando para rede Sepolia...');
      notifyInfo('üîÑ Alterando automaticamente para rede Sepolia...');
      
      await (window.ethereum as any).request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: `0x${DEFAULT_CHAIN_ID.toString(16)}` }],
      });

      console.log('‚úÖ Mudan√ßa para Sepolia realizada com sucesso');
      notifySuccess('‚úÖ Conectado √† rede Sepolia com sucesso!');
    } catch (switchError: unknown) {
      console.log('‚ö†Ô∏è Tentativa de mudan√ßa autom√°tica falhou:', switchError);
      
      if (switchError instanceof Error && (
        switchError.message.includes('4902') || 
        switchError.message.includes('Unrecognized chain ID')
      )) {
        try {
          console.log('üì° Adicionando rede Sepolia...');
          notifyInfo('üì° Adicionando rede Sepolia √† sua carteira...');
          
          await (window.ethereum as any).request({
            method: 'wallet_addEthereumChain',
            params: [
              {
                chainId: `0x${DEFAULT_CHAIN_ID.toString(16)}`,
                chainName: 'Sepolia Test Network',
                nativeCurrency: {
                  name: 'Sepolia ETH',
                  symbol: 'SEP',
                  decimals: 18,
                },
                rpcUrls: [NETWORK_CONFIG.rpcUrl],
                blockExplorerUrls: ['https://sepolia.etherscan.io/'],
              },
            ],
          });
          
          console.log('‚úÖ Rede Sepolia adicionada com sucesso');
          notifySuccess('‚úÖ Rede Sepolia adicionada e conectada!');
        } catch (addError) {
          console.log('‚ùå Falha ao adicionar rede:', addError);
          notifyInfo('‚ö†Ô∏è N√£o foi poss√≠vel trocar automaticamente. Use o bot√£o "Trocar para Sepolia" se necess√°rio.');
        }
      } else if (switchError instanceof Error && switchError.message.includes('4001')) {
        // Usu√°rio rejeitou
        notifyInfo('‚ö†Ô∏è Troca de rede cancelada. Use o indicador no canto superior direito se precisar trocar manualmente.');
      } else {
        notifyInfo('‚ö†Ô∏è N√£o foi poss√≠vel trocar automaticamente. Use o bot√£o no canto superior direito se necess√°rio.');
      }
    }
  };

  // Effect para detectar login e for√ßar troca de rede
  useEffect(() => {
    if (authenticated && user) {
      console.log('üîß LOGIN DETECTADO:', {
        userId: user.id,
        walletType: user?.wallet?.walletClientType || 'unknown',
        connectorType: user?.wallet?.connectorType || 'none',
        hasWallet: hasWallet,
        isSmartWallet: isSmartWallet,
        isExternalWallet: isExternalWallet,
        loginMethods: user?.linkedAccounts?.map(acc => acc.type) || []
      });

      // Mostrar mensagem de boas-vindas primeiro
      if (isSmartWallet) {
        notifySuccess('‚úÖ Login realizado! Smart wallet configurada automaticamente para Sepolia.');
      } else if (isExternalWallet) {
        notifyInfo('üîÑ Login realizado! Verificando/configurando rede Sepolia...');
      }

      // SEMPRE tentar mudar para Sepolia ap√≥s login, independente do tipo de wallet
      // Aguardar 2 segundos para garantir estabilidade da conex√£o
      const timer = setTimeout(() => {
        console.log('üöÄ Iniciando processo de troca para Sepolia...');
        if (isExternalWallet) {
          switchToDefaultNetwork();
        }
      }, 2000);

      return () => clearTimeout(timer);
    }
  }, [authenticated, user]);

  // A√ß√µes
  const connect = async () => {
    try {
      await login();
    } catch (error) {
      throw error;
    }
  };

  const disconnect = () => {
    logout();
  };

  return {
    // Estados
    isReady,
    isAuthenticated,
    isConnecting,
    isConnected,
    
    // Dados
    user,
    address,
    userInfo,
    
    // Verifica√ß√µes
    hasWallet,
    isSmartWallet,
    isExternalWallet,
    
    // A√ß√µes
    connect,
    disconnect,
    connectWallet,
    linkWallet
  };
} 